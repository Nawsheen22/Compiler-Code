#include <iostream>
#include <stack>
#include <cctype>
using namespace std;

// Function to determine operator precedence
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

// Function to check if a character is an operator
bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

// Function to generate three-address code for a given expression
void generateTAC(string expr) {
    stack<string> operands; // Stack to hold intermediate results
    stack<char> operators; // Stack to hold operators
    int counter = 1; // Counter for temporary variables

    for (char c : expr) {
        if (isalnum(c)) {
            // If the character is an operand (variable or number), push it onto the operands stack
            operands.push(string(1, c));
        } else if (isOperator(c)) {
            // While the top operator in the stack has higher or equal precedence
            // than the current operator, process the top operator
            while (!operators.empty() && precedence(operators.top()) >= precedence(c)) {
                char op = operators.top();
                operators.pop();

                string right = operands.top(); operands.pop();
                string left = operands.top(); operands.pop();

                string tempVar = "t" + to_string(counter++);
                cout << tempVar << " = " << left << " " << op << " " << right << endl;
                operands.push(tempVar);
            }

            // Push the current operator onto the operators stack
            operators.push(c);
        }
    }

    // Process any remaining operators in the stack
    while (!operators.empty()) {
        char op = operators.top();
        operators.pop();

        string right = operands.top(); operands.pop();
        string left = operands.top(); operands.pop();

        string tempVar = "t" + to_string(counter++);
        cout << tempVar << " = " << left << " " << op << " " << right << endl;
        operands.push(tempVar);
    }
}

int main() {
    string expression;
    cout << "Enter the arithmetic expression: ";
    cin >> expression;

    cout << "Three Address Code:\n";
    generateTAC(expression);

    return 0;
}
